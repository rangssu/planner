<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.planner.mapper.FriendMapper">
	<!-- 친구 시퀀스로 객체 찾기 -->
	<select id="findByFriendId" resultType="FriendDTO">
		select *
		from friend
		where friend_id = #{friend_id}
	</select>
	
	<!-- 회원 시퀀스로 친구 시퀀스 찾기 -->
	<select id="findByFriendSeq" resultType="java.lang.Long">
		select friend_id
		from friend
		where member_my_id = #{member_my_id}
		and member_friend_id = #{member_friend_id}
	</select>
	
	<!-- 친구신청 (보낼 때) -->
	<insert id="friendRequest" parameterType="FriendRequestDTO">
		insert into friend_request values(
			friend_request_seq.NEXTVAL,
			#{member_receive_id},
			#{member_send_id},
			'S'
		)
	</insert>
	
	<!-- 친구신청 상태 찾기 -->
	<select id="friendRequestStatus" resultType="String">
		select fr.friend_request_status
		from friend_request fr
		left outer join member m
		on fr.member_receive_id = m.member_id
		where member_receive_id = #{member_receive_id}
		and member_send_id = #{member_send_id}
		and m.member_status = 'B'
	</select>
	
	<!-- (받은)친구신청 갯수 -->
	<select id="receiveRequestCount" resultType="int">
		select count(*)
		from member m
		left outer join friend_request fr
		on m.member_id = fr.member_send_id
		where fr.member_receive_id = #{member_receive_id}
		and friend_request_status = 'S'
		and member_status = 'B'
	</select>
	
	<!-- (받은)친구신청 리스트 -->
	<select id="receiveRequestList" resultType="FriendRequestDTO">
		select m.member_email, m.member_name, fr.*
		from member m
		left outer join friend_request fr
		on m.member_id = fr.member_send_id
		where fr.member_receive_id = #{member_receive_id}
		and friend_request_status = 'S'
		and member_status = 'B'
	</select>
	
	<!-- (보낸)친구신청 리스트 -->
	<select id="sendRequestList" resultType="FriendRequestDTO">
		select m.member_email, m.member_name, fr.*
		from member m
		left outer join friend_request fr
		on m.member_id = fr.member_receive_id
		where fr.member_send_id = #{member_send_id}
		and friend_request_status = 'S'
		and member_status = 'B'
	</select>
	
	<!-- 친구신청 취소/거절 -->
	<delete id="requestDelete">
		delete
		from friend_request
		where member_receive_id = #{member_receive_id}
		and member_send_id = #{member_send_id}
	</delete>
	
	<!-- 친구수락 -->
	<update id="friendAccept" parameterType="Long">
		update friend_request
		set friend_request_status = 'F'
		where member_receive_id = #{member_receive_id}
		and member_send_id = #{member_send_id}
	</update>
	
	<!-- 친구 테이블에 추가 -->
	<insert id="friendAdd" parameterType="FriendDTO">
		insert into friend values(
			friend_seq.NEXTVAL,
			#{member_my_id},
			#{member_friend_id},
			#{friend_my_nickname},
			#{friend_nickname},
			'none',
			'none'
		)
	</insert>
	
	<!-- 친구목록 -->
	<select id="friendList" resultType="FriendDTO">
		select m.member_name, m.member_email,
		f.FRIEND_ID ,
		f.member_my_id,
		f.member_friend_id,
		f.FRIEND_MY_NICKNAME ,
		f.FRIEND_NICKNAME ,
		f.FRIEND_MY_MEMO ,
		f.FRIEND_MEMO
		from friend f
		left outer join member m
		on m.member_id = f.member_my_id
		or m.member_id = f.member_friend_id
		where m.member_id != #{member_my_id}
		and m.member_status = 'B'
		and (f.member_friend_id = #{member_my_id}
		or f.member_my_id = #{member_my_id})
	</select>
	
	
	<!-- 친구 닉네임 변경 -->
	<update id="friendNickName" parameterType="friendDTO">
		update friend
		set
			friend_my_nickname = #{friend_my_nickname},
			friend_nickname = #{friend_nickname}
		where friend_id = #{friend_id}
	</update>
	
	<!-- 친구 메모 변경 -->
	<update id="friendMemo" parameterType="friendDTO">
		update friend
		set
			friend_my_memo = #{friend_my_memo},
			friend_memo = #{friend_memo}
		where friend_id = #{friend_id}
	</update>
	
	<!-- 친구정보 (정방향) -->
	<select id="friendInfo" resultMap="resultInfo">
		select f.*, m.*
		from friend f
		left outer join member m
		on f.member_friend_id = m.member_id
		where member_my_id = #{member_my_id}
		and member_friend_id = #{member_friend_id}
		and member_status = 'B'
	</select>
	
	<!-- 친구정보 (역방향) join 시 상대 회원 정보로 반환하기 위함 -->
	<select id="friendInfoC" resultMap="resultInfo">
		select f.*, m.*
		from friend f
		left outer join member m
		on f.member_my_id = m.member_id
		where member_my_id = #{member_my_id}
		and member_friend_id = #{member_friend_id}
		and member_status = 'B'
	</select>
	
	<!-- 회원 정보 List ResultMap -->
	<resultMap id="resultInfo" type="FriendDTO">
		<id column="friend_id" property="friend_id"	/>
		<result column="member_my_id" property="member_my_id"	/>
		<result column="member_friend_id" property="member_friend_id"	/>
		<result column="friend_my_nickname" property="friend_my_nickname"	/>
		<result column="friend_nickname" property="friend_nickname"	/>
		<result column="friend_my_memo" property="friend_my_memo"	/>
		<result column="friend_memo" property="friend_memo"	/>
		<collection property="memberInfo" resultMap="selectMemberInfo"></collection>
	</resultMap>
	
	<!-- 회원 정보 -->
	<resultMap id="selectMemberInfo" type="MemberDTO">
		<id column="member_id" property="member_id"	/>
		<result column="member_email" property="member_email"	/>
		<result column="member_password" property="member_password"	/>
		<result column="member_name" property="member_name"	/>
		<result column="member_birth" property="member_birth"	/>
		<result column="member_phone" property="member_phone"	/>
		<result column="member_gender" property="member_gender"	/>
	</resultMap>
	
	<!-- 친구삭제 -->
	<delete id="friendDelete">
		delete
		from friend
		where friend_id = #{friend_id}
	</delete>
	
	<!-- 친구상태 찾기 -->
	<select id="friendStatus" resultType="String">
		select friend_request_status
		from friend_request
		where member_receive_id = #{member_receive_id}
		and member_send_id = #{member_send_id}
	</select>
</mapper>