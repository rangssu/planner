<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.planner.mapper.TeamBoardMapper">

<resultMap type="TeamBoardDTO" id="boardMap">
	<result column="team_board_id"	property="team_board_id"	jdbcType="BIGINT"	javaType="Long"/>
	<result column="team_id"		property="team_id"			jdbcType="BIGINT"	javaType="Long"/>
	<result column="team_member_id"	property="team_member_id"	jdbcType="BIGINT"	javaType="Long"/>
	<result column="vote_id"		property="vote_id"			jdbcType="BIGINT"	javaType="Long"/>
	<result column="schedule_id"	property="schedule_id"		jdbcType="BIGINT"	javaType="Long"/>
	<result column="tb_category"	property="tb_category"		jdbcType="VARCHAR"	javaType="String"/>
	<result column="tb_title"		property="tb_title"			jdbcType="VARCHAR"	javaType="String"/>
	<result column="tb_content"		property="tb_content"		jdbcType="CLOB"		javaType="String"/>
	<result column="tb_reg"			property="tb_reg"			jdbcType="DATE"		javaType="java.time.LocalDateTime"/>
	<result column="tm_nickname"	property="tm_nickname"		jdbcType="VARCHAR"	javaType="String"/>
</resultMap>

<select id="teamBoardCountAll" resultType="int">
	select count(*) from team_board where team_id=#{team_id}
</select>
<!--
	마이바티스 null 검사할 때 null, "" 두가지 각각 검사하는방법 외에도 자바의 static 함수를 가져다 쓸 수 있음.
	함수를 직접 만들거나, 기존의 라이브러리에서 사용.
	if test="@classpath@method(parameter)"
	sql문에 직접 쓰면 ${@classpath@method(parameter)}
	''는 char, ""는 String으로 취급해서 자바에서 특별히 char로 보내야 할 이유가 없으면 조건문 쓸때는 바깥에 ' ', 안쪽에 " " 쓰는게 좋음.
	같음 : "".euqals(), eq, ==  / 다름 : !"".euqals(), neq, !=
-->
<select id="teamBoardCount" resultType="int">
	select count(*) from team_board
		where team_id=#{team_id}
		<if test='category neq null and !"전체".equals(category)'>
		and tb_category = #{category}
		</if>
		<if test='searchOption != null and !"".equals(searchOption) and searchOption neq "NO"'>
			<if test='searchOption.equals("TC")'>
			and (tb_title like '%'||#{search}||'%'
				or team_board_id in 
			        (select team_board_id from
			            (select team_board_id,<![CDATA[REGEXP_REPLACE(tb_content,'<[^>]*>','')]]> as tbc from team_board)
			                where DBMS_LOB.instr(tbc, #{search}) > 0))
			</if>
			<if test='searchOption eq "T"'>
			and tb_title like '%'||#{search}||'%'
			</if>
			<if test="searchOption=='C'.toString()">
			and team_board_id in 
		        (select team_board_id from
		            (select team_board_id,<![CDATA[REGEXP_REPLACE(tb_content,'<[^>]*>','')]]> as tbc from team_board)
		                where DBMS_LOB.instr(tbc, #{search}) > 0)
			</if>
			<if test='searchOption eq "W"'>
			and team_member_id in
				(select team_member_id from team_member where team_id=#{team_id} and tm_nickname like '%'||#{search}||'%')
			</if>
		</if>
</select>

<select id="teamBoardList" resultType="TeamBoardListDTO">
   select stb.*, re.reply_count from 
      (select tbs.*, rownum as rn from 
         (select
             tb.team_board_id,
             tb.team_member_id,
             tb.schedule_id,
             tb.tb_category,
             tb.tb_title,
             tb.tb_reg,
             v.vote_id,
             tm.tm_nickname
             from team_board tb
             join team_member tm
                on tb.team_member_id = tm.team_member_id
             left outer join vote v
                on tb.team_board_id = v.team_board_id
             where tb.team_id=#{team_id}
             <if test='category!="전체"'>
            and tb.tb_category = #{category}
            </if>
            <if test='searchOption != null and !"".equals(searchOption) and searchOption neq "NO"'>
               <if test='searchOption.equals("TC")'>
               and (tb_title like '%'||#{search}||'%'
                  or tb.team_board_id in 
                       (select team_board_id from
                           (select team_board_id,<![CDATA[REGEXP_REPLACE(tb_content,'<[^>]*>','')]]> as tbc from team_board)
                               where DBMS_LOB.instr(tbc, #{search}) > 0))
               </if>
               <if test='searchOption eq "T"'>
               and tb_title like '%'||#{search}||'%'
               </if>
               <if test="searchOption=='C'.toString()">
               and tb.team_board_id in 
                       (select team_board_id from
                           (select team_board_id,<![CDATA[REGEXP_REPLACE(tb_content,'<[^>]*>','')]]> as tbc from team_board)
                               where DBMS_LOB.instr(tbc, #{search}) > 0)
               </if>
               <if test='searchOption eq "W"'>
               and tm.tm_nickname like '%'||#{search}||'%'
               </if>
            </if>
          order by tb.team_board_id desc) tbs
       ) stb
   left join(
      select team_board_id, count(*) as reply_count
      from reply
      group by team_board_id
   ) re on stb.team_board_id = re.team_board_id
   where stb.rn between #{start} and #{end}
   order by stb.team_board_id desc
</select>
<insert id="teamBoardInsert" parameterType="TeamBoardDTO">
	<selectKey keyProperty="team_board_id" resultType="long" order="BEFORE">
		select team_board_seq.nextval from dual
	</selectKey>
	insert into team_board values(
		#{team_board_id}, #{team_id}, #{team_member_id}, 
		#{schedule_id, jdbcType=BIGINT}, #{tb_category},
		#{tb_title}, #{tb_content}, sysdate)
</insert>

<select id="teamBoardView" resultMap="boardMap">
	select tb.*, tm.tm_nickname, v.vote_id
	from team_board tb
    join team_member tm
    	on tb.team_member_id = tm.team_member_id
	left outer join vote v
    	on tb.team_board_id = v.team_board_id
	where tb.team_board_id=#{team_board_id}
</select>

<update id="teamBoardUpdate" parameterType="TeamBoardUpdateDTO">
	update team_board set
		tb_category=#{tb_category},
		tb_title=#{tb_title},
		tb_content=#{tb_content}
	where
		team_board_id=#{team_board_id}
		and team_board_id in 
			(select team_board_id
			from team_board
			where team_member_id = #{team_member_id})
</update>

<delete id="teamBoardDelete">
	delete team_board
	where team_board_id=#{team_board_id}
</delete>

</mapper>